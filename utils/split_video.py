import os
import subprocess
import multiprocessing

# S·ªë frame m·ªói segment
SEGMENT_SIZE = 32

def get_video_info(input_path):
    """ L·∫•y t·ªïng s·ªë frame v√† FPS c·ªßa video """
    # L·∫•y t·ªïng s·ªë frame
    probe_frames = subprocess.run(
        ["ffprobe", "-v", "error", "-select_streams", "v:0", "-count_frames",
         "-show_entries", "stream=nb_read_frames", "-of", "default=nokey=1:noprint_wrappers=1", input_path],
        capture_output=True, text=True
    )
    
    # L·∫•y FPS
    probe_fps = subprocess.run(
        ["ffprobe", "-v", "error", "-select_streams", "v:0", "-show_entries", "stream=r_frame_rate",
         "-of", "default=nokey=1:noprint_wrappers=1", input_path],
        capture_output=True, text=True
    )

    try:
        total_frames = int(probe_frames.stdout.strip())
        fps = eval(probe_fps.stdout.strip())  # Chuy·ªÉn "25/1" th√†nh 25.0
        return total_frames, fps
    except ValueError:
        return None, None

def split_video(args):
    """ T√°ch video th√†nh t·ª´ng segment 32 frame """
    input_path, output_folder, is_normal = args
    filename = os.path.basename(input_path)
    name, ext = os.path.splitext(filename)

    # L·∫•y th√¥ng tin video
    total_frames, fps = get_video_info(input_path)
    if total_frames is None or fps is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc {filename}, b·ªè qua!")
        return

    num_segments = total_frames // SEGMENT_SIZE
    if num_segments < 1:
        print(f"‚ö†Ô∏è {filename} qu√° ng·∫Øn ({total_frames} frames), b·ªè qua!")
        return

    # N·∫øu kh√¥ng ph·∫£i "NormalVideos", c·∫Øt b·ªõt 20% ƒë·∫ßu & cu·ªëi
    start_idx, end_idx = 0, num_segments
    if not is_normal and num_segments > 4:
        trim_size = num_segments // 5  # 20% s·ªë segment
        start_idx += trim_size
        end_idx -= trim_size

    print(f"üé¨ {filename}: {total_frames} frames, {end_idx - start_idx} segments")

    for i in range(start_idx, end_idx):
        new_index = i - start_idx  # Reset index v·ªÅ 0
        segment_filename = f"{name}_{new_index:03d}{ext}"
        segment_output = os.path.join(output_folder, segment_filename)

        if os.path.exists(segment_output):
            print(f"‚úîÔ∏è ƒê√£ c√≥ {segment_filename}, b·ªè qua!")
            continue

        start_frame = i * SEGMENT_SIZE  # Gi·ªØ nguy√™n start_frame theo index g·ªëc

        command = [
            "ffmpeg",
            "-hwaccel", "auto",
            "-ss", str(start_frame / fps),
            "-i", input_path,
            "-t", str(SEGMENT_SIZE / fps),
            "-c:v", "libx264", "-crf", "23", "-preset", "fast",
            segment_output
        ]

        subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(f"‚úÖ ƒê√£ t·∫°o segment: {segment_output}")

def process_folder(input_folder, output_folder, num_workers=4):
    """ Duy·ªát qua th∆∞ m·ª•c v√† t√°ch video song song """
    task_list = []

    for root, _, files in os.walk(input_folder):
        for file in files:
            if file.lower().endswith(('.mp4', '.mkv', '.avi', '.mov')):
                input_path = os.path.join(root, file)
                relative_path = os.path.relpath(root, input_folder)
                is_normal = "NormalVideos" in relative_path

                # T·∫°o th∆∞ m·ª•c ƒë√≠ch
                segment_output_folder = os.path.join(output_folder, relative_path)
                os.makedirs(segment_output_folder, exist_ok=True)

                task_list.append((input_path, segment_output_folder, is_normal))

    # Gi·ªõi h·∫°n s·ªë lu·ªìng t·ªëi ƒëa
    num_workers = min(8, os.cpu_count() // 2)
    print(f"üöÄ Ch·∫°y {num_workers} lu·ªìng song song...")

    with multiprocessing.Pool(num_workers) as pool:
        pool.map(split_video, task_list)

if __name__ == "__main__":
    input_folder = "5fps/Train"
    output_folder = "5fps_Segments2/Train"
    os.makedirs(output_folder, exist_ok=True)

    process_folder(input_folder, output_folder)